// WATCHER
//
// WatcherCheck.cs
// Main implementation of WatcherCheck Class.
//
// Copyright (c) 2010 Casaba Security, LLC
// All Rights Reserved.
//

using System;
using System.IO;
using System.Reflection;
using System.Web;
using System.Collections.Specialized;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using Fiddler;

namespace CasabaSecurity.Web.Watcher
{
    /// <summary>
    /// This type represents the severity of the alert generated by a Watcher check.
    /// </summary>
    /// <remarks>
    /// TODO: Move this to WatcherResult.cs
    /// </remarks>
    public enum WatcherResultSeverity
    {
        Informational = 0,
        Low,
        Medium,
        High
    }

    /// <summary>
    /// This type represents a check's conformance with standards implemented by Watcher.
    /// </summary>
    [Flags]
    public enum WatcherCheckStandardsCompliance
    {
        None                           = 0x0000,    // The check is not comformant with a standard implemented by Watcher
        OwaspAppSecVerificationLevel1  = 0x0001,    // The check conforms to OWASP Application Security Verification Level 1A -and- 1B
        OwaspAppSecVerificationLevel1A = 0x0002,    // The check conforms to OWASP ASVL 1A
        OwaspAppSecVerificationLevel1B = 0x0003,    // ...
        OwaspAppSecVerificationLevel2  = 0x0008,    // The check conforms to OWASP ASVL 2A -and- 2B
        OwaspAppSecVerificationLevel2A = 0x0010,    // ...
        OwaspAppSecVerificationLevel2B = 0x0020,
        OwaspAppSecVerificationLevel3  = 0x0030,
        OwaspAppSecVerificationLevel4  = 0x0080,
        MicrosoftSDL                   = 0x0100,    // The check conforms to a Microsoft SDL requirement or recommendation.
    }

    /// <summary>
    /// This is the base class for Watcher Checks, which includes a set of virtual
    /// functions that should be implemented by checks.
    /// </summary>
    public abstract class WatcherCheck
    {
        #region Fields
        public Boolean _enabled = true;                                 // Is this check enabled?
        public int historysize = 1000;
        private WatcherCheckStandardsCompliance _standardsCompliance;   // Standards implemented by Watcher that this check conforms to
        #endregion

        #region Ctor(s)

        // TODO: POTENTIALLY BREAKING CHANGE: public -> protected
        protected WatcherCheck()
        {
        }

        #endregion

        #region Public Properties

        /// <summary>
        /// Returns True if the check is enabled, False otherwise.
        /// </summary>
        public Boolean Enabled
        {
            get { return _enabled; }
            set { _enabled = value; }
        }

        /// <summary>
        /// Returns a bitmask of standards implemented by Watcher that this check conforms to.
        /// </summary>
        public WatcherCheckStandardsCompliance StandardsCompliance
        {
            get { return _standardsCompliance; }
            protected set { _standardsCompliance = value; }
        }

        #endregion

        #region Public Methods

        public virtual void Clear()
        {
        }

        public virtual String GetName()
        {
            return base.ToString();
        }

        public virtual String GetDescription()
        {
            return base.ToString();
        }

        public virtual System.Windows.Forms.Panel GetConfigPanel()
        {
            return null;
        }

        public static NameValueCollection GetRequestParameters(Session session)
        {
            NameValueCollection nvc = null;
            String qs = null;

            // If this is GET request
            if (session.HTTPMethodIs("GET"))
            {
                // ...and has query string
                if (session.PathAndQuery.IndexOf("?") > 0)
                {
                    // Get the query string
                    qs = session.PathAndQuery.Substring(session.PathAndQuery.IndexOf("?") + 1);
                }
            }

            // If is a POST request
            if (session.HTTPMethodIs("POST"))
            {
                // ...and has a content-type
                if (session.oRequest.headers.Exists("content-type"))
                {
                    // ... and is urlencoded form data
                    if (session.oRequest.headers["content-type"] == "application/x-www-form-urlencoded")
                    {
                        // TODO: is a decode needed?
                        //session.utilDecodeRequest();

                        // Get the request body as a string
                        qs = System.Text.Encoding.UTF8.GetString(session.requestBodyBytes);
                    }
                }
            }

            // If we have a query string
            if (qs != null)
            {
                // Parse it...
                try
                {
                    nvc = HttpUtility.ParseQueryString(qs);

                    // Remove any nulls from ill-formed query strings
                    List<string> lst = new List<string>();

                    foreach (String param in nvc.Keys)
                    {
                        if (param == null)
                        {
                            lst.Add(param);
                        }
                    }

                    foreach (String param in lst)
                    {
                        nvc.Remove(param);
                    }
                }

                // TODO: Could we be missing things here?  False negatives?
                catch (ArgumentNullException ane)
                {
                    ExceptionLogger.HandleException(ane);// discard
                }
            }

            return (nvc);
        }

        // This function should be thread safe
        // TODO: POTENTIALLY BREAKING CHANGE: Method signature: removal of Watcher parameter
        public abstract void Check(Session session, UtilityHtmlParser htmlParser);

        public virtual void UpdateWordList()
        {
        }

        public override string ToString()
        {
            return GetName();
        }

        /// <summary>
        /// This method returns a string representative of the standards to which this check complies.
        /// </summary>
        public virtual String GetStandardsComplianceString()
        {
            StringBuilder standardsCompliance = new StringBuilder();

            #region OWASP Standards

            // If the check is compliant with the specified standard, add the canonical name (retrieved 
            // from the resource file) of the standard to the string returned.
            if (IsCompliant(WatcherCheckStandardsCompliance.MicrosoftSDL))
            {
                standardsCompliance.AppendFormat("{0}, ", GetResourceComplianceString(WatcherCheckStandardsCompliance.MicrosoftSDL));
            }

            if (IsCompliant(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel1))
            {
                standardsCompliance.AppendFormat("{0}, ", GetResourceComplianceString(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel1));
            }

            // ... and do this for each standards compliance flag ...
            if (IsCompliant(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel1A))
            {
                standardsCompliance.AppendFormat("{0}, ", GetResourceComplianceString(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel1A));
            }

            if (IsCompliant(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel1B))
            {
                standardsCompliance.AppendFormat("{0}, ", GetResourceComplianceString(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel1B));
            }

            if (IsCompliant(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel2))
            {
                standardsCompliance.AppendFormat("{0}, ", GetResourceComplianceString(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel2));
            }

            if (IsCompliant(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel2A))
            {
                standardsCompliance.AppendFormat("{0}, ", GetResourceComplianceString(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel2A));
            }

            if (IsCompliant(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel2B))
            {
                standardsCompliance.AppendFormat("{0}, ", GetResourceComplianceString(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel2B));
            }

            if (IsCompliant(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel3))
            {
                standardsCompliance.AppendFormat("{0}, ", GetResourceComplianceString(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel3));
            }

            if (IsCompliant(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel4))
            {
                standardsCompliance.AppendFormat("{0}, ", GetResourceComplianceString(WatcherCheckStandardsCompliance.OwaspAppSecVerificationLevel4));
            }

            // If the check complies not to a standard, assume it complies to the None standard
            if (standardsCompliance.Length == 0)
            {
                standardsCompliance.AppendFormat("{0}", GetResourceComplianceString(WatcherCheckStandardsCompliance.None));
            }

            #endregion

            // Extract the string from the string builder, and remove the trailing separator characters
            // TODO: does this make a copy of the string? it should.
            String standardsComplianceDisplayed = standardsCompliance.ToString();
            standardsComplianceDisplayed = standardsComplianceDisplayed.TrimEnd(new char[] { ',', ' ' });

            // Clear the string builder
            // TODO: does this reallocate the string?
            standardsCompliance.Remove(0, standardsCompliance.Length);

            // Return the canonical list of standards to which this check complies
            return standardsComplianceDisplayed;
        }

        #endregion

        #region Private Method(s)

        /// <summary>
        /// This method retreives the user-visible, canonical description of the specified compliance flag from the resource file.
        /// </summary>
        /// <param name="e">The compliance flag to retrieve.</param>
        /// <returns>The canonical description of the specified standard.</returns>
        private String GetResourceComplianceString(WatcherCheckStandardsCompliance e)
        {
            return Properties.Resources.ResourceManager.GetString(String.Format("WatcherCheckStandardsCompliance_{0}", e.ToString()));
        }

        /// <summary>
        /// This method indicates whether the specified compliance flag is supported by this check.
        /// </summary>
        /// <param name="e">The compliance flag to check.</param>
        /// <returns>True if the check complies with the specified flag; False otherwise.</returns>
        private Boolean IsCompliant(WatcherCheckStandardsCompliance e)
        {
            return (StandardsCompliance & e) == e;
        }

        #endregion
    }
}